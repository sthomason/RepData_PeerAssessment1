m <- n(data)
x$setsolve(m)
m
}
cacheSolve <- function(x, ...) {
m <- x$getsolve()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
n <- function(f) {
tryCatch(solve(f, ...), error = function(p) {print("singular matrix, does not have an inverse")}
)
}
m <- n(data)
x$setsolve(m)
m
}
## matrix, does not have an inverse"
## This function takes as its input a matrix that has been
## saved as a separate object (i.e. a <- matrix(1:6, 2, 3))
## and creates a "special matrix", or list of functions to
## (1) set the value of the matrix
## (2) get the value of the matrix
## (3) set the value of the inverse of the matrix
## (4) get the value of the inverse of the matrix
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y, z, q) {
x <<- matrix(y, z, q)
x <<- as.data.frame(x)
m <<- NULL
}
get <- function() x
setsolve <- function(solve) m <<- solve
getsolve <- function() m
list(set = set, get = get,
setsolve = setsolve,
getsolve = getsolve)
}
## This function takes as its input the "special matrix"
## generated by the first function above. For example, after
## creating matrix a, you would then create a new object
## with makeCacheSolve (i.e. b <- makeCacheMatrix(a)) and
## use b as the input for this function (i.e cacheSolve(b))
## This function checks to see if the inverse of the
## matrix has already been calculated. If it has, it
## gets the inverse matrix from the cache. Otherwise,
## it calculates the inverse matrix and saves it in
## the cache.
## If the matrix is singular and does not have an inverse,
## the function returns a message saying "singular
## matrix, does not have an inverse"
cacheSolve <- function(x, ...) {
m <- x$getsolve()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
n <- function(f) {
tryCatch(solve(f, ...), error = function(p) {print("singular matrix, does not have an inverse")}
)
}
m <- n(data)
x$setsolve(m)
m
}
a <- matrix(1:5, 5, 5)
b <- makeCacheMatrix(a)
cacheSolve(b)
b <- matrix(1:4, 2, 2)
bb <- makeCacheMatrix(b)
cacheSolve(bb)
{
cacheSolve <- function(x, ...) {
m <- x$getsolve()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
n <- function(f) {
tryCatch(solve(f, ...), error = function(p) {print("singular matrix, does not have an inverse")}
)
}
m <- n(data)
x$setsolve(m)
m
}
}
if(!file.exists("./data")){dir.create("./data")}
fileUrl <- "https://data.baltimorecity.gov/api/views/k5ry-ef3g/rows.csv?accessTye=DOWNLOAD"
download.file(fileUrl,destfile=".data/restaurants.csv",method="curl")
restData <- read.csv("./data/restaurants.csv")
download.file(fileUrl,destfile="./restaurants.csv",method="curl")
restData <- read.csv("./restaurants.csv")
head(restData,n=3)
summary(restData)
str(restData)
quantile(restData$councilDistrict,na.rm=TRUE)
table(restData$zipCode,useNA="ifany")
table(restData$councilDistrict, restData$zipCode)
sum(is.na(restData$councilDistrict))
any(is.na(restData$councilDistrict))
all(restData$zipCode > 0)
colSums(is.na(restData))
all(colSums(is.na(restData))==0)
data(UCBAdmissions)
DF=as.data.frame(UCBAdmissions)
summary(DF)
xt <- xtabs(Freq ~ Gender + Admit, data=DF)
xt
warpbreaks$replicate <- rep(1:9, len=54)
xt = xtabs(breaks ~.,data=warpbreaks)
xt
ftable(xt)
fakeData = rnorm(1e5)
object.size(fakeData)
s1 <- seq(1,10,by=2) ; s1
restData$nearMe=restData$neighborhodd %in% c("ROland Park", "Homeland")
restData$nearMe=restData$neighborhood %in% c("Roland Park", "Homeland")
restData
restData$zipWrong=ifelse(restData$zipCode < 0, TRUE, FALSE)
table(restData$zipWrong,restData$zipCode<0)
restData$zipGroups=cut(restData$zipCode,breaks=quantile(restData$zipCode))
table(restData$zipGroups)
table(restData$zipGroups,restData$zipCode)
les
restData$zcf <- factor(restData$zipCode)
restData$zcf[1:10]
class(restData$zcf)
library(Hmisc); library(plyr)
restData2 = mutate(restData,zipGroups=cut2(zipCode,g=4))
table(restData2$zipGroups)
library(reshape2)
head(mtcars)
mtcars$carname <- rownames(mtcars)
carMelt <- melt(mtcars,id=c("carname","gear","cyl"),measure.vars=c("mpg","hp"))
head(marMelt,n=3)
head(carMelt,n=3)
tail(carMelt,n=3)
cylData <- dcast(carMelt, cyl ~ variable)
cylData
cylData <- dcast(carMelt, cyl ~ variable,mean)
cylData
head(InsectSprays)
tapply(InsectSprays$count,InsectSprays$spray,sum)
spIns=split(InsectSprays$count,InsectSprays$spray)
spIns
sprCount=lapply(spIns,sum)
sprCount
unlist(sprCount)
ddply(InsectSprays,.(spray),summarize,sum=sum(count))
spraySums <- ddply(InsectSprays,.(spray),summarize,sum=ave(count,FUN=sum))
dim(spraySums)
head(spraySums)
if(!file.exists("./data")){dir.create("./data")}
fileUrl1 = "https://dl.dropboxusercontent.com/u/7710864/data/reviews-apr29.csv"
fileUrl2 = "https://dl.dropboxusercontent.com/u/7710864/data/solutions-apr29.csv"
download.file(fileUrl1,destfile="./data/reviews.csv",method="curl")
download.file(fileUrl2,destfile="./data/solutions.csv",method="curl")
reviews=read.csv("./data/reviews.csv")
solutions <- read.csv("./data/solutions.csv")
head(reviews,2)
head(solutions,2)
names(reviews)
names(solutions)
mergedData=merge(reviews,solutions,by.x="solution_id",by.y="id",all=TRUE)
head(mergedData)
df1=data.frame(id=sample(1:10),x=rnorm(10))
df2=data.frame(id=sample(1:10),x=rnorm(10))
df3=data.frame(id=sample(1:10),x=rnorm(10))
dfList=list(df1,df2,df3)
join_all(dfList)
makeCacheMatrix <- function(x = matrix(1:4, 2, 2)) {
inverse <- NULL
set <- function(y) {
x <<- y
inverse <<- NULL
}
get <- function() { x }
solve <- function() {
## I went with a memoization approach instead of
## explicit get/set methods.  See:
## http://en.wikipedia.org/wiki/Memoization
if (is.null(inverse)) {
message("Calculating & caching inverse")
inverse <<- base:::solve(x)
} else {
message("Using cached value for inverse")
}
inverse
}
list(set = set, get = get, solve = solve)
}
## Solver: Instead of using `solve`, use this function to solve
##  for the inverse of the matrix.  The result will be cached and
##  subsequent calls will return the result much faster.
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
## Due to the use of memoization above, this is a bit silly.
x$solve(...)
}
makeCacheMatrix <- function(x = matrix(1:4, 2, 2)) {
inverse <- NULL
set <- function(y) {
x <<- y
inverse <<- NULL
}
get <- function() { x }
solve <- function() {
## I went with a memoization approach instead of
## explicit get/set methods.  See:
## http://en.wikipedia.org/wiki/Memoization
if (is.null(inverse)) {
message("Calculating & caching inverse")
inverse <<- base:::solve(x)
} else {
message("Using cached value for inverse")
}
inverse
}
list(set = set, get = get, solve = solve)
}
## Solver: Instead of using `solve`, use this function to solve
##  for the inverse of the matrix.  The result will be cached and
##  subsequent calls will return the result much faster.
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
## Due to the use of memoization above, this is a bit silly.
x$solve(...)
}
akeCacheMatrix <- function(x = matrix(1:4, 2, 2)) {
inverse <- NULL
set <- function(y) {
x <<- y
inverse <<- NULL
}
get <- function() { x }
solve <- function() {
## I went with a memoization approach instead of
## explicit get/set methods.  See:
## http://en.wikipedia.org/wiki/Memoization
if (is.null(inverse)) {
message("Calculating & caching inverse")
inverse <<- base:::solve(x)
} else {
message("Using cached value for inverse")
}
inverse
}
list(set = set, get = get, solve = solve)
}
2+2
akeCacheMatrix <- function(x = matrix(1:4, 2, 2)) {
inverse <- NULL
set <- function(y) {
x <<- y
inverse <<- NULL
}
get <- function() { x }
solve <- function() {
## I went with a memoization approach instead of
## explicit get/set methods.  See:
## http://en.wikipedia.org/wiki/Memoization
if (is.null(inverse)) {
message("Calculating & caching inverse")
inverse <<- base:::solve(x)
} else {
message("Using cached value for inverse")
}
inverse
}
list(set = set, get = get, solve = solve)
}
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
## Due to the use of memoization above, this is a bit silly.
x$solve(...)
}
makeCacheMatrix <- function(x = matrix(1:4, 2, 2)) {
inverse <- NULL
set <- function(y) {
x <<- y
inverse <<- NULL
}
get <- function() { x }
solve <- function() {
## I went with a memoization approach instead of
## explicit get/set methods.  See:
## http://en.wikipedia.org/wiki/Memoization
if (is.null(inverse)) {
message("Calculating & caching inverse")
inverse <<- base:::solve(x)
} else {
message("Using cached value for inverse")
}
inverse
}
list(set = set, get = get, solve = solve)
}
## Solver: Instead of using `solve`, use this function to solve
##  for the inverse of the matrix.  The result will be cached and
##  subsequent calls will return the result much faster.
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
## Due to the use of memoization above, this is a bit silly.
x$solve(...)
}
library(lattice)
library(datasets)
# Simple scatterplot
xyplot(Ozone~Wind, data=airquality)
airquality <- transfrm(airquality, Month=factor(Month))
xyplot(Ozone~Wind|Month, data=airquality, layout=c(5,1))
library(lattice)
library(datasets)
airquality <- transfrm(airquality, Month=factor(Month))
xyplot(Ozone~Wind|Month, data=airquality, layout=c(5,1))
airquality <- transform(airquality, Month=factor(Month))
xyplot(Ozone~Wind|Month, data=airquality, layout=c(5,1))
p <- xyplot(Ozone~Wind, data=airquality)
print(p)
set-seed(10)
x<-rnorm(100)
f <- rep(0:1, each=50)
y <- x+f-f*x+rnorm(100, sd=0.5)
f <- factor(f, labels=c("Group 1", "Group 2"))
xyplot(y~x|f, layout=c(2,1))
xyplot(y~x|f, panel=function(x,y,...) {
panel.xyplot(x, y, ...)
panel.abline(h=median(y), lty=2)
})
xyplot(y~x|f, panel=function(x,y,...) {
panel.xyplot(x, y, ...)
panel.lmline(x,y,col=2)
})
library(nlme)
library(lattice)
xplot(weight~Time|Diet, BodyWeight)
xyplot(weight~Time|Diet, BodyWeight)
str(Diet)
str(BodyWeight)
library(ggplot2)
str(mpg)
qplot(displ, hwy, data=mpg)
qplot(displ, hwy, data=mpg, color=drv)
qplot(displ, hwy, data=mpg, geom=c("point", "smooth"))
qplot(hwy, data=mpg, fill=drv)
qplot(displ, hwy, data=mpg, facets=.~drv)
qplot(hwy, data=mpg, facets=drv~., binwidth=2)
qplot(Wind, Ozone, data=airquality, facets=.~factor(Month))
airquality = transform(airquality, Month=factor(Month))
qplot(Wind, Ozone, data=airquality, facets=.~Month)
qplot(votes, rating, data=movies)
qplot(votes, rating, data=movies, smooth="loess")
qplot(votes, rating, data=movies) + geom_smooth()
My First knitr Document
========================================================
Here is a code chunk
```{r}
set.seed(1)
x<-rnorm(100)
mean(x)
```
Code doesn't show, just the result
```{r simulation,echo=FALSE}
set.seed(1)
x<-rnorm(100)
mean(x)
```
Hide results
```{r simulation,echo=FALSE,results="hide"}
set.seed(1)
x<-rnorm(100)
mean(x)
```
Embed results in a sentence
```{r computetime,echo=FALSE}
time<-format(Sys.time(), "%a %b %d %X %Y")
rand<-rnorm(1)
```
The current time is `r time`. My favorite random number is `r rand`.
```{r simulatedata,echo=TRUE}
x<-rnorm(100); y<-x+rnorm(100, sd=0.5)
```
Here is a scatterplot of the data.
```{r scatterplot,fig.height=4}
par(mar=c(5,4,1,1), las=1)
plot(x,y, main="My Simulated Data")
```
Make a table
```{r fitmodel}
library(datasets)
data(airquality)
fit <- lm(Ozone~Wind+Temp+Solar.R, data=airquality)
```
Here is the table of regression coefficients
```{r showtable,results="asis"}
library(xtable)
xt<-xtable(summary(fit))
print(xt, type="html")
```
head(airquality)
install.packages(xtable)
install.packages("xtable")
setwd("~/r/RepData_PeerAssessment1")
read.csv("activity.csv", header=TRUE)
activity <- read.csv("activity.csv", header=TRUE)
head(activity)
str(activity)
activity$date <- as.character(activity$date)
str(activity)
activity$date <- as.Date(activity$date, format = "%Y-%m-%d")
str(activity)
tail(activity)
head(InsectSprays)
tapply(InsectSprays$count,InsectSprays$spray,sum)
?tapply
activity <- read.csv("activity.csv", header=TRUE)
daymean <- tapply(activity$steps, activity$date, mean, na.rm=TRUE)
daymean
tapply(activity$steps, activity$date, mean, na.rm=TRUE)
daysplit=split(activity$steps, activity$date)
daysplit
daymean=lapply(daysplit,mean)
daymean
unlist(daymean)
str(daymean)
daymean <- tapply(activity$steps, activity$date, sum, na.rm=TRUE)
daymean
unlist(daymean)
daymean
str(daymean)
daymean <- as.data.frame(daymean)
daymean
str(daymean)
mean(daymean$daymean)
mean(daymean$daymean)
str(activity)
intervalmean <- tapply(activity$steps, activity$interval, mean, na.rm=TRUE)
str(intervalmean)
head(intervalmean)
intervalmean <- as.data.frame(intervalmean)
head(intervalmean)
max(intervalmean)
colnames(intervalmean) <- c("interval", "mean")
intervalmean[,1]
intervalmean[1,1]
intervalmean[,2]
rownames(intervalmean)
intervalmean <- tapply(activity$steps, activity$interval, mean, na.rm=TRUE)
intervalmean <- as.data.frame(intervalmean, row.names=NULL)
str(intervalmean)
head(intervalmean)
intervalmean[,2]
intervalmeans <- as.data.frame(intervalmean, row.names=NULL)
intervalmeans
str(intervalmeans)
intervalmean$interval <- rownames(intervalmean)
rownames(intervalmean=NULL)
rownames(intervalmean)=NULL
str(intervalmean)
rownames(intervalmean)=NULL
rownames(intervalmean)<-NULL
str(intervalmean)
qplot(interval, intervalmean, data=intervalmean)
str(intervalmean)
maxinterval <- aggregate(interval ~ intervalmean, intervalmean, max)
maxinterval
maxinterval <- aggregate(intervalmean ~ interval, intervalmean, max)
maxinterval
maxinterval <- aggregate(intervalmean, intervalmean, max)
maxinterval
intervalagg <- aggregate(intervalmean, intervalmean, max)
intervalmax <- merge(intervalagg, intervalmean)
intervalagg
intervalmean
intervalmax <- merge(intervalagg, intervalmean)
head(intervalmean)
sorted <- (intervalmean[order(intervalmean[,1], ])
sorted <- (intervalmean[order(intervalmean[,1]])
sorted <- (intervalmean[order(intervalmean[,1])])
sorted <- (intervalmean[order(intervalmean[,1],)])
sorted <- (intervalmean[order(intervalmean[,1]),])
sorted
head(sorted)
?order
sorted <- (intervalmean[order(intervalmean[,1], decreasing=TRUE),])
head(sorted)
intervalmax <- intervalmean[1,]
intervalmax
intervalmax <- sorted[1,]
intervalmax
interval <- intervalmax[1,2]
interval
stepavg <- intervalmax[1,1]
stepavg
intervalmax
stepavg <- sorted[1,1]
stepavg
sorted
```{r}
?median
?tapply
round(pnorm(10, mean=80, sd=10)*100)
round(pnorm(70, mean=80, sd=10)*100)
(.52*.75)/(.52*.75+.48*.3)
.9/.8
.9/.2
